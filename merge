from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Rectangle
from pyglet.graphics import Batch
from pyglet import clock
import random

class Renderer(Window):
    def __init__(self):
        super().__init__(1200, 600, "Merge Sort Visualization")
        self.batch = Batch()
        self.num_bars = 100
        self.bar_width = self.width / (self.num_bars * 1.5)
        self.bar_height = 400
        self.x = list(range(1, self.num_bars + 1))
        random.shuffle(self.x)
        self.bars = []

        pink_rgb = (255, 192, 203, 255)
        for e, i in enumerate(self.x):
            self.bars.append(Rectangle(50 + e * (self.bar_width * 1.5), 100, self.bar_width, i * 4, color=pink_rgb, batch=self.batch))

    def merge_sort(self, arr):
        if len(arr) > 1:
            mid = len(arr) // 2
            left_half = arr[:mid]
            right_half = arr[mid:]

            self.merge_sort(left_half)
            self.merge_sort(right_half)

            i = j = k = 0

            while i < len(left_half) and j < len(right_half):
                if left_half[i] < right_half[j]:
                    arr[k] = left_half[i]
                    i += 1
                else:
                    arr[k] = right_half[j]
                    j += 1
                k += 1

            while i < len(left_half):
                arr[k] = left_half[i]
                i += 1
                k += 1

            while j < len(right_half):
                arr[k] = right_half[j]
                j += 1
                k += 1

    def on_update(self, deltatime):
        self.merge_sort(self.x)
        for e, i in enumerate(self.x):
            self.bars[e].height = i * 4

    def on_draw(self):
        self.clear()
        self.batch.draw()

renderer = Renderer()
clock.schedule_interval(renderer.on_update, 1)
run()

